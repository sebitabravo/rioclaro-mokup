# Generated by Django 4.2.24 on 2025-09-27 18:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('stations', '0002_initial'),
        ('sensors', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Threshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_type', models.CharField(choices=[('water_level', 'Nivel de Agua'), ('flow_rate', 'Caudal'), ('temperature', 'Temperatura'), ('ph', 'pH'), ('rainfall', 'Precipitación')], max_length=20, verbose_name='Tipo de Medición')),
                ('warning_min', models.DecimalField(blank=True, decimal_places=4, help_text='Valor mínimo que genera advertencia', max_digits=12, null=True, verbose_name='Mínimo de Advertencia')),
                ('warning_max', models.DecimalField(blank=True, decimal_places=4, help_text='Valor máximo que genera advertencia', max_digits=12, null=True, verbose_name='Máximo de Advertencia')),
                ('critical_min', models.DecimalField(blank=True, decimal_places=4, help_text='Valor mínimo que genera alerta crítica', max_digits=12, null=True, verbose_name='Mínimo Crítico')),
                ('critical_max', models.DecimalField(blank=True, decimal_places=4, help_text='Valor máximo que genera alerta crítica', max_digits=12, null=True, verbose_name='Máximo Crítico')),
                ('unit', models.CharField(help_text='Unidad de medida para los umbrales', max_length=20, verbose_name='Unidad')),
                ('is_active', models.BooleanField(default=True, help_text='Determina si el umbral está activo para generar alertas', verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Notas adicionales sobre la configuración del umbral', verbose_name='Notas')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_thresholds', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thresholds', to='stations.station', verbose_name='Estación')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_thresholds', to=settings.AUTH_USER_MODEL, verbose_name='Actualizado por')),
            ],
            options={
                'verbose_name': 'Umbral',
                'verbose_name_plural': 'Umbrales',
                'db_table': 'thresholds',
                'ordering': ['station', 'measurement_type'],
                'unique_together': {('station', 'measurement_type')},
            },
        ),
        migrations.CreateModel(
            name='MeasurementConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_interval_minutes', models.PositiveIntegerField(default=15, help_text='Frecuencia de medición en minutos', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)], verbose_name='Intervalo de Medición (minutos)')),
                ('data_retention_days', models.PositiveIntegerField(default=365, help_text='Días para conservar los datos históricos', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Retención de Datos (días)')),
                ('auto_alerts_enabled', models.BooleanField(default=True, verbose_name='Alertas Automáticas Habilitadas')),
                ('notification_email', models.EmailField(blank=True, help_text='Email para enviar notificaciones de alertas', max_length=254, verbose_name='Email de Notificación')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('station', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='measurement_config', to='stations.station', verbose_name='Estación')),
            ],
            options={
                'verbose_name': 'Configuración de Medición',
                'verbose_name_plural': 'Configuraciones de Medición',
                'db_table': 'measurement_configurations',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_type', models.CharField(choices=[('water_level', 'Nivel de Agua'), ('flow_rate', 'Caudal'), ('temperature', 'Temperatura'), ('ph', 'pH'), ('rainfall', 'Precipitación')], help_text='Tipo de variable medida', max_length=20, verbose_name='Tipo de Medición')),
                ('value', models.DecimalField(decimal_places=4, help_text='Valor numérico de la medición', max_digits=12, verbose_name='Valor')),
                ('raw_value', models.DecimalField(blank=True, decimal_places=4, help_text='Valor original sin calibrar (opcional)', max_digits=12, null=True, verbose_name='Valor Crudo')),
                ('unit', models.CharField(help_text='Unidad de medida (cm, l/s, °C, etc.)', max_length=20, verbose_name='Unidad')),
                ('quality_flag', models.CharField(choices=[('good', 'Buena'), ('suspect', 'Sospechosa'), ('poor', 'Mala'), ('missing', 'Faltante')], default='good', max_length=20, verbose_name='Indicador de Calidad')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='Momento exacto de la medición', verbose_name='Fecha y Hora')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='Momento en que se recibió la medición en el servidor', verbose_name='Recibido en')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Información adicional sobre la medición', verbose_name='Metadatos')),
                ('sensor', models.ForeignKey(help_text='Sensor específico que realizó la medición', on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='sensors.sensor', verbose_name='Sensor')),
                ('station', models.ForeignKey(help_text='Estación de monitoreo de origen', on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='stations.station', verbose_name='Estación')),
            ],
            options={
                'verbose_name': 'Medición',
                'verbose_name_plural': 'Mediciones',
                'db_table': 'measurements',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('info', 'Información'), ('warning', 'Advertencia'), ('critical', 'Crítico'), ('emergency', 'Emergencia')], max_length=20, verbose_name='Nivel de Alerta')),
                ('status', models.CharField(choices=[('active', 'Activa'), ('acknowledged', 'Reconocida'), ('resolved', 'Resuelta'), ('dismissed', 'Descartada')], default='active', max_length=20, verbose_name='Estado')),
                ('title', models.CharField(help_text='Título descriptivo de la alerta', max_length=200, verbose_name='Título')),
                ('message', models.TextField(help_text='Descripción detallada de la alerta', verbose_name='Mensaje')),
                ('triggered_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Activada en')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Reconocida en')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resuelta en')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notas de Resolución')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadatos adicionales')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Reconocida por')),
                ('measurement', models.ForeignKey(help_text='Medición que generó la alerta', on_delete=django.db.models.deletion.CASCADE, related_name='generated_alerts', to='measurements.measurement', verbose_name='Medición')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Resuelta por')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='stations.station', verbose_name='Estación')),
                ('threshold', models.ForeignKey(help_text='Umbral que fue superado', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='measurements.threshold', verbose_name='Umbral')),
            ],
            options={
                'verbose_name': 'Alerta',
                'verbose_name_plural': 'Alertas',
                'db_table': 'alerts',
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['station', '-timestamp'], name='measurement_station_2b53af_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['sensor', '-timestamp'], name='measurement_sensor__40ffee_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['measurement_type', '-timestamp'], name='measurement_measure_d2b1ab_idx'),
        ),
        migrations.AddIndex(
            model_name='measurement',
            index=models.Index(fields=['-timestamp'], name='measurement_timesta_4a27e2_idx'),
        ),
        migrations.AddConstraint(
            model_name='measurement',
            constraint=models.UniqueConstraint(fields=('station', 'sensor', 'timestamp'), name='unique_measurement_per_sensor_timestamp'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['station', '-triggered_at'], name='alerts_station_a7cc32_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['level', '-triggered_at'], name='alerts_level_458553_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['status', '-triggered_at'], name='alerts_status_861098_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['-triggered_at'], name='alerts_trigger_b60ee3_idx'),
        ),
    ]
